@model SiappGasIn.Models.PipeCalculator

<div class="container body" style="padding-left:230px;padding-right:230px;margin-top:-7px;">
    <div class="card">
        <div class="row ">
            <div class="col-md-12 px-3">
                <div class="card-block" style="border: 1px;">
                    <div class="row">
                        <div class="col-md-7">
                            <h5 class="card-title font-bold batasAtas">Cost Structure Simulation Software</h5>
                        </div>
                        <div class="col-md-5"><img src="@Url.Content("~/adminlte/images/logos.png")"
                                class="image-responsive" style="width:120px; height:40px; float: right;"></div>
                    </div>

                    <div id="resultSimulation">
                        <div class="card example-1 scrollbar-deep-purple bordered-deep-purple thin"
                            style="margin-top: 7px;">
                            <div class="card-body" style="margin: 15px ;">
                                 <form class="form-horizontal form-label-left">
                                    <label>Detail Pipeline</label>
                                    <div class="form-group row ">
                                        <label class="control-label col-md-3 col-sm-3 ">Distance</label>
                                        <div class="col-md-9 col-sm-9 ">
                                            <label class="control-label col-md-9 col-sm-9"><span style="font-weight:bold;"
                                                    id="projectName" class="formatNum">@Model.distanceValue</span> <span> @Model.distanceUnit</span></label>
                                        </div>
                                    </div>
                                    <div class="form-group row ">
                                        <label class="control-label col-md-3 col-sm-3 ">Diameter Estimate</label>
                                        <div class="col-md-9 col-sm-9 ">
                                            <label class="control-label col-md-9 col-sm-9"><span style="font-weight:bold;"
                                                    id="projectName">@Model.diameterValue</span> <span> @Model.diameterUnit</span></label>
                                        </div>
                                    </div>
                                    <div class="form-group row ">
                                        <label class="control-label col-md-3 col-sm-3 ">Pressure</label>
                                        <div class="col-md-9 col-sm-9 ">
                                            <label class="control-label col-md-9 col-sm-9"><span style="font-weight:bold;"
                                                    id="projectName">@Model.pressureValue</span> <span> @Model.pressureUnit</span></label>
                                        </div>
                                    </div>
                                    <div class="form-group row ">
                                        <label class="control-label col-md-3 col-sm-3 ">Volume</label>
                                        <div class="col-md-9 col-sm-9 ">
                                            <label class="control-label col-md-9 col-sm-9"><span style="font-weight:bold;"
                                                    id="projectName" class="formatNum">@Model.volumeValue</span> <span> @Model.volumeUnit</span></label>
                                        </div>
                                    </div>
                                    <div class="form-group row ">
                                        <label class="control-label col-md-3 col-sm-3 ">Cost</label>
                                        <div class="col-md-9 col-sm-9 ">
                                            <label class="control-label col-md-9 col-sm-9"><span style="font-weight:bold;"
                                                    id="projectName" class="formatNum">@Model.costValue</span> <span> @Model.costUnit</span></label>
                                        </div>
                                    </div>
                                    <label>Route Map</label>
                                    <div class="form-group row ">
                                               
                                                <div class="col-md-3 col-sm-3 ">
                                                    <a href="#" onclick="mapp()" class="btn btn-success btn-sm"
                                                        style="height:24px; width:100%; line-height:1;">Route Map</a>
                                                </div>

                                                </div>

                                </form>

                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12 col-sm-12  offset-md-3" style="margin-top:10px ;">
                                <button type="submit" onclick="backResult();"
                                    class="btn btn-warning btn-sm pull-right RbtnMargin">Back</button>
                            </div>
                        </div>
                    </div>

                    <div id="maps">
                        <center><div id="map" class="map"></div></center>
                        <div class="row">
                            <div class="col-md-12 col-sm-12  offset-md-3" style="margin-top:10px ;">
                                <button type="submit" onclick="back()"
                                    class="btn btn-danger btn-sm pull-right RbtnMargin">Close</button>                               
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>

@section Styles{
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.3.1/dist/leaflet.css" />
    <link rel="stylesheet" href="~/plugins/leaflet/leaflet-routing-machine.css" />
    @*<link rel="stylesheet" href="~/plugins/leaflet/index.css" />*@
    <style>
        .map {
   height: 400px;
    width: 640px;
}

.results {
    background-color: white;
    opacity: 0.8;
    position: absolute;
    top: 12px;
    right: 12px;
    width: 320px;
    height: 480px;
    overflow-y: scroll;
}
    </style>
}

@section Scripts{


<script type="text/javascript" src="~/plugins/map/js/lib/jquery-3.1.0.min.js"></script>
 <script src="https://unpkg.com/leaflet@1.3.1/dist/leaflet.js"></script>
  <script type="text/javascript" src="~/plugins/map/js/lib/leaflet.js"></script>
        <script type="text/javascript" src="~/plugins/map/js/lib/leaflet.draw.js"></script>
    <script src="~/plugins/leaflet/leaflet-routing-machine.js"></script>
    <script src="~/plugins/leaflet/Control.Geocoder.js"></script>
    <script src="~/plugins/leaflet/config.js"></script>


    <script>

    $(document).ready(function() {
        
    $.ajax({
     url: '@Url.Action("Retrieve", "MstLokasiSPBG")',
    type: 'post',
    dataType: 'json',
        success: function(response) {

            var len = response.data.length;
            var locationMaps = {};
            locationMaps["features"] = [];
            for (var i = 0; i < len; i++) {

                let temp = {
                    "type": "Feature",
                    "properties": { "oficina": response.data[i].namaSPBG },
                    "geometry": { "type": "Point", "coordinates": [response.data[i].longitude, response.data[i].latitude] }
                }
                locationMaps.features.push(temp);
            }
            var ofi_paf = locationMaps;

            var osmUrl = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
                    osmAttrib = '&copy; <a href="http://openstreetmap.org/copyright">OpenStreetMap</a> contributors',
                    osm = L.tileLayer(osmUrl, { maxZoom: 18, attribution: osmAttrib });
                map = new L.Map('map', {
                    minZoom: 6,
                    zoom: 9
                })
                osm.addTo(map)

                var control = L.Routing.control(L.extend(window.lrmConfig, {
	waypoints: [
		L.latLng('@Model.latitude', '@Model.longitude'),
		L.latLng('@Model.latitude', '@Model.longitude'),
	],
	geocoder: L.Control.Geocoder.nominatim(),
	routeWhileDragging: true,
	reverseWaypoints: true,
	showAlternatives: true,
	altLineOptions: {
		styles: [
			{color: 'black', opacity: 0.15, weight: 9},
			{color: 'white', opacity: 0.8, weight: 6},
			{color: 'blue', opacity: 0.5, weight: 2}
		]
	}
})).addTo(map);

L.Routing.errorControl(control).addTo(map);

                // This is the circle on the map that will be determine how many markers are around
                var circle;
                // The marker drawn onto the map
                var drawn_marker = L.marker();
                // Group for our markers
                var drawn_markers = L.featureGroup();
                map.addLayer(drawn_markers);
                // Icons that get placed on map
                var eco = L.icon({
                    iconSize: [32, 37],
                    iconAnchor: [16, 37],
                    popupAnchor: [0, -28],
                    iconUrl: '/plugins/map/images/pertacon.png'
                });
                // When an icon is clicked
                function popup(feature, layer) {
                    if (feature.properties && feature.properties.oficina) {
                        layer.bindPopup(feature.properties.oficina, {
                            closeButton: false,
                            offset: L.point(0, -20)
                        });
                        layer.on('mouseover', function () {
                            layer.openPopup();
                        });
                        layer.on('mouseout', function () {
                            layer.closePopup();
                        });
                    }
                };
                // Convert miles to meters to set radius of circle
                function milesToMeters(miles) {
                    return miles * 1069.344;
                };
                // This figures out how many points are within out circle
                function pointsInCircle(circle, meters_user_set) {
                    results = [];
                    if (circle !== undefined) {
                        // Only run if we have an address entered
                        // Lat, long of circle
                        circle_lat_long = circle.getLatLng();
                        var counter_points_in_circle = 0;
                        // Loop through each point in JSON file
                        farmacias.eachLayer(function (layer) {
                            // Lat, long of current point
                            layer_lat_long = layer.getLatLng();
                            // Distance from our circle marker
                            // To current point in meters
                            distance_from_layer_circle = layer_lat_long.distanceTo(circle_lat_long);
                            // See if meters is within raduis
                            // The user has selected
                            if (distance_from_layer_circle <= meters_user_set) {
                                counter_points_in_circle += 1;
                                var ofi_paf_html = '<h4>' + counter_points_in_circle + '. ' + layer.feature.properties.oficina + '</h4>';
                                // Convert to miles
                                ofi_paf_html += 'Distance: ' + (distance_from_layer_circle / 1000).toFixed(2) + ' Km';
                                $('#ofi_paf').append(ofi_paf_html);
                                let temp = {
                                    "lokasi": layer.feature.properties.oficina,
                                    "jarak": (distance_from_layer_circle / 1000).toFixed(2)
                                }
                                results.push(temp);
                            }
                        });
                        // Set number of results on main page
                        $('#ofi_paf_results').html(counter_points_in_circle);
                    }
                    // Close pointsInCircle
                };
                // Change circle radius when changed on page
                function changeCircleRadius(jarak) {
                    // Determine which geocode box is filled
                    // And fire click event
                    // This will determine how many markers are within the circle
                    pointsInCircle(circle, milesToMeters(jarak))
                    // Set radius of circle only if we already have one on the map
                    if (circle) {
                        circle.setRadius(milesToMeters(jarak));
                    }
                }
                // Allow user to add marker to map
                var draw_control = new L.Control.Draw({
                    draw: {
                        polyline: false,
                        polygon: false,
                        circle: true,
                        marker: drawn_marker
                    },
                    edit: {
                        featureGroup: drawn_markers,
                        remove: true
                    }
                });
                map.on(L.Draw.Event.CREATED, function (event) {
                    var layer = event.layer;
                    drawn_markers.addLayer(layer);
                });
                map.addControl(draw_control);
                // Allow user to search through GeoJSON file
                //var search_control = new L.Control.Search({
                //	layer: farmacias,
                //	propertyName: 'oficina',
                //	circleLocation: true
                //});
                //map.addControl(search_control);
                //L.control.scale().addTo(map);
                //  var searchControl = new L.esri.Controls.Geosearch().addTo(map);
                //  var results = new L.LayerGroup().addTo(map);
                //  searchControl.on('results', function(data){
                //	results.clearLayers();
                //	for (var i = data.results.length - 1; i >= 0; i--) {
                //	  results.addLayer(L.marker(data.results[i].latlng));
                //	}
                //  }).addTo(map);
                //  L.control.scale().addTo(map);
                //setTimeout(function(){$('.pointer').fadeOut('slow');},3400);
                // Add GeoJSON layer
                var farmacias = L.geoJson(ofi_paf, {
                    onEachFeature: popup,
                    pointToLayer: function (feature, latlng) {
                        return L.marker(latlng, { icon: eco });
                    }
                }).addTo(map);
                // This is called after the marker is drawn
                map.on('draw:created', function (e) {
                    // Add a circle around the marker
                    var marker_lat_long = e.layer._latlng
                    $("#latitude").val(marker_lat_long.lat);
                    $("#longitude").val(marker_lat_long.lng);
                    var radius = milesToMeters($("#radius").val());
                    circle = L.circle(marker_lat_long, radius)
                    circle.addTo(map);
                    // Calculate the number of eco icons within the circle
                    // So we can put it on the DOM
                    pointsInCircle(circle, radius)
                    // Make the marker draggable
                    e.layer.dragging.enable();
                    // If you drag the marker, make sure the circle goes with it
                    e.layer.on('dragend', function (event) {

                        $("#latitude").val(event.target.getLatLng().lat);
                        $("#longitude").val(event.target.getLatLng().lng);
                        map.setView(event.target.getLatLng());
                        circle.setLatLng(event.target.getLatLng());
                        // Clear out results
                        $('#ofi_paf').html('');
                        // This will determine how many markers are within the circle
                        pointsInCircle(circle, milesToMeters($('#radius').val()));
                        // Redraw: Leaflet function
                        circle.redraw();
                    });
                    $('.leaflet-draw-draw-marker').hide();
                });
                // Reset map view on marker drag
                drawn_marker.on('dragend', function (event) {
                    map.setView(event.target.getLatLng());
                    circle.setLatLng(event.target.getLatLng());
                    // This will determine how many markers are within the circle
                    pointsInCircle(circle, milesToMeters($('#radius').val()));
                    // Redraw: Leaflet function
                    circle.redraw();
                });
        }

});

    $("#maps").hide();

     let x = document.querySelectorAll(".formatNum");
		for (let i = 0, len = x.length; i < len; i++) {
            
			let num = Number(x[i].textContent)
					.toLocaleString('en');
			x[i].textContent = num;
		}

    
});
    </script>

<script type="text/javascript">   

   




</script>

<script type="text/javascript">
//maps
     function back() {
        $("#maps").hide();
        $("#resultSimulation").show();
    }

    function mapp() {
        $("#maps").show();
        $("#resultSimulation").hide();
        map.invalidateSize(); 
    }


    function Details(Id) {
        var url = '@Url.Action("Index", "SimulationCost")?Id=' + Id;
        window.location.href = url;
    }
    
    function backResult() {
        var ids = @(Model.HeaderSimulationID);
        var url = '@Url.Action("Result", "SimulationCost")?Id=' +  ids;
        window.location.href = url;
    }
</script>
}